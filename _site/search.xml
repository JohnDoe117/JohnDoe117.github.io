<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[python-Ëß£ÂåÖÂÆåÂÖ®ÊîªÁï•]]></title>
      <url>/python%E5%B0%8F%E6%8A%80%E5%B7%A7/2020/03/15/python%E8%A7%A3%E5%8C%85/</url>
      <content type="text"><![CDATA[  Âêå‰∫ãÔºö[‚ÄòÂù§Âù§‚Äô, ‚ÄòÂî±‚Äô, ‚ÄòË∑≥‚Äô, rap‚Äô, ‚Ä¶ ‚ÄòÁØÆÁêÉ‚Äô, ‚ÄòÁªÉ‰π†Áîü‚Äô ] ‰Ω†ËßâÂæóËøôÊ†∑ÁöÑÂàóË°®ÊÄé‰πàÊèêÂèñÂßìÂêçË∫´‰ªΩÂíåÁà±Â•ΩÊØîËæÉÂ•ΩÂë¢Ôºü  ÁãÆÂ≠êÔºö‰Ω†Ëøô‰∏™Êï∞ÊçÆÊúâÁÇπËøáÊó∂ÂïäÔºåÂìéÔºåÁÆó‰∫Ü„ÄÇ„ÄÇ„ÄÇ ËØïËØïËß£ÂåÖÂêß„ÄÇ[TOC]PythonËß£ÂåÖ‚ÄìÂèØËø≠‰ª£ÂØπË±°ÂàÜËß£‰∏∫ÂçïÁã¨ÂèòÈáè  ‚Äã	‰ª£Á†ÅÂùá‰∏∫python3  ‚Äã	Á¨¨‰∏ÄÊÆµÈòÖËØªÊó∂Èó¥‰∏∫2minÔºà‰∏ªË¶ÅÂÜÖÂÆπÔºâ      Âõ∫ÂÆöÂÖÉÁ¥†‰∏™Êï∞ÂàóË°®Á≠âÂèØËø≠‰ª£ÂØπË±°Ëß£ÂåÖ          # Áõ¥Êé•ÂØπÂ∫îÂÖÉÁ¥†‰ΩçÁΩÆËøõË°åÊìç‰ΩúÂç≥ÂèØa, b = (1, 2)a, b = [1, 2]# Â¶ÇÊûúÂÖÉÁ¥†Êï∞Èáè‰∏çÂåπÈÖç‰ºöÊäõÂá∫Â¶Ç‰∏ãÂºÇÂ∏∏&gt;&gt;&gt; a, b = [1, 2, 3]Traceback (most recent call last):  File "&lt;stdin&gt;", line 1, in &lt;module&gt;ValueError: too many values to unpack (expected 2)                  Â¶ÇÊûúÊÉ≥‰∏¢ÂºÉÂõ∫ÂÆö‰ΩçÁΩÆÁöÑÂèòÈáèpythonÊ≤°ÊúâÊèê‰æõÁâπÊÆäÁöÑËØ≠Ê≥ïÂéªÂ§ÑÁêÜÔºå‰∏ÄËà¨‰ΩøÁî®‰∏ç‰ºö‰ΩøÁî®Âà∞ÁöÑÂèòÈáèÂÅöÂç†‰Ωç          a, _, b = [1, 2, 3]                  ‰ªªÊÑèÈïøÂ∫¶ÁöÑÂèØËø≠‰ª£ÂØπË±°ÂàÜËß£ÂÖÉÁ¥†    ËøôÁßçÊó∂ÂÄôÊàë‰ª¨Â∞±Ë¶Å‰ΩøÁî®pythonÁöÑ‚Äú*Ë°®ËææÂºè‚Äù *ÂºèËØ≠Ê≥ïÂØπ‰∫éÂèòÈïøÂ∫èÂàóÂ∞§‰∏∫ÊúâÁî®ËÆ©Êàë‰ª¨Êù•Ëß£ÂÜ≥‰∏äÈù¢ÁöÑÈóÆÈ¢òÂêß    # *ÂºèËØ≠Ê≥ïÁÆÄÁõ¥ÈáèË∫´ÂÆöÂÅö&gt;&gt;&gt; name, *love, occupation = ['Âù§Âù§', 'Âî±', 'Ë∑≥', 'rap', 'ÁØÆÁêÉ', 'ÁªÉ‰π†Áîü' ]&gt;&gt;&gt; name'Âù§Âù§'&gt;&gt;&gt; occupation'ÁªÉ‰π†Áîü'&gt;&gt;&gt; love['Âî±', 'Ë∑≥', 'rap', 'ÁØÆÁêÉ']            ÂÖ∂‰ªñ‰æãÂ≠ê                  ÊâÄÊúâÂÆûÁé∞__next__ÊñπÊ≥ïÁöÑÂØπË±°ÈÉΩÊîØÊåÅËß£ÂåÖÊìç‰Ωú        # tips:ÊâÄÊúâÂÆûÁé∞__next__ÊñπÊ≥ïÁöÑÂØπË±°ÈÉΩÊîØÊåÅËß£ÂåÖÊìç‰Ωú&gt;&gt;&gt; a, b, c, d, e = 'hello'&gt;&gt;&gt; b'e'# Â≠óÂÖ∏ÂØπË±°‰πüÂèØ‰ª•‰ΩøÁî®Ëß£ÂåÖÊñπÊ≥ï Âè™‰ºö‰øùÂ≠òkeyÂÄº&gt;&gt;&gt; a = {"a": 1, "b": 2}&gt;&gt;&gt; c, d = a&gt;&gt;&gt; c'a'&gt;&gt;&gt; d'b'                            Python3.5‰ª•‰∏äÊîØÊåÅÂ§ö‰∏™Ëß£ÂåÖ,ËÄå‰∏îÂèØ‰ª•Áî®Âú®Ë°®ËææÂºè‰∏≠„ÄÇ        ‰∏æ‰∏™‰æãÂ≠ê        # python3.5‰ª•‰∏ãa = {"a" = 1}b = {"b" = 2}c = copy.deepcoy(a)c.update(c)                # Êõ¥Êñ∞‰πãÂêéÊàë‰ª¨Â∞±ÂèØ‰ª•Áõ¥Êé•ËøôÊ†∑Êìç‰Ωúc = {**a, **b}                          Â∞èÁªì                  ÊâÄÊúâËø≠‰ª£ÂØπË±°ÈÉΩÂèØ‰ª•ËøõË°åËß£ÂåÖÊìç‰Ωú                    ‚Äú*Âíå**Ë°®ËææÂºè‚ÄùÊòØÂ§ÑÁêÜÂèòÈïøÂØπË±°ÁöÑÂà©Âô®              ‰ª•‰∏ãÂÜÖÂÆπ‰ªÖ‰Ωú‰∏∫Â∏ÆÂä©ÁêÜËß£Ëß£ÂåÖËøáÁ®ãpythonËß£ÂåÖËøõÈò∂ ‚Äì Ê∫êÁ†ÅËß£Êûê      Ëß£ÂåÖÊòØÂ¶Ç‰ΩïÊìç‰ΩúÔºü    &gt;&gt;&gt; a, b = [1, 2]# ‰ª•‰∏ã‰∏∫Ê≠§Ëß£ÂåÖÊìç‰ΩúÁöÑÂ≠óËäÇÁ†Å0 LOAD_CONST               1 (1)2 LOAD_CONST               2 (2)4 BUILD_LIST               26 UNPACK_SEQUENCE          28 STORE_FAST               0 (a)10 STORE_FAST              1 (b)            Ê†∏ÂøÉÊìç‰ΩúÂæàÊòéÊòæÊòØUNPACK_SEQUENCEÊâÄ‰ª•Êàë‰ª¨Áß∞Ëøô‰∏™ËøáÁ®ã‰∏∫Ëß£ÂåÖ        Â§ßËá¥ÂäüËÉΩ‰∏∫ ÊääÊ†àÈ°∂ÂÖÉÁ¥†ÊâìÂåÖÊàêÂçïÁã¨ÁöÑËÆ°Êï∞ÂÄºÔºåÁÑ∂ÂêéÂÜçÊääËøô‰∫õÂÄº‰ªéÂè≥Âà∞Â∑¶ÊîæÂÖ•Â†ÜÊ†à‰∏≠    Âú®Ê∫êÁ†Å‰∏≠ÁöÑÂÆûÁé∞‰∏∫    // Ê∫êÁ†ÅÁâàÊú¨‰∏∫3.7.4// ceval.cTARGET(UNPACK_SEQUENCE) {PyObject *seq = POP(), *item, **items;if (PyTuple_CheckExact(seq) &amp;&amp;    PyTuple_GET_SIZE(seq) == oparg) {    items = ((PyTupleObject *)seq)-&gt;ob_item;    while (oparg--) {        item = items[oparg];        Py_INCREF(item);        PUSH(item);    }} else if (PyList_CheckExact(seq) &amp;&amp;            PyList_GET_SIZE(seq) == oparg) {    items = ((PyListObject *)seq)-&gt;ob_item;    while (oparg--) {        item = items[oparg];        Py_INCREF(item);        PUSH(item);    }} else if (unpack_iterable(seq, oparg, -1,                            stack_pointer + oparg)) {    STACKADJ(oparg);} else {    /* unpack_iterable() raised an exception */    Py_DECREF(seq);    goto error;}Py_DECREF(seq);DISPATCH();}              ÂèØ‰ª•ÁúãÂá∫pythonÂØπÂÖÉÁ•ñÂíåÂàóË°®Á±ªÂûãÁöÑÂÜÖÁΩÆÂØπË±°ÊúâÁõ¥Êé•ÁöÑÊìç‰ΩúÔºåÂÖ∂‰ªñÂØπË±°ÊòØ‰ΩøÁî®unpack_iterableÂáΩÊï∞ËøõË°åËß£ÂåÖÊìç‰Ωú„ÄÇ            *ÁöÑËß£ÂåÖÊñπÊ≥ï‰∏∫UNPACK_EX    // Ê∫êÁ†ÅÁâàÊú¨‰∏∫3.7.4// ceval.cTARGET(UNPACK_EX) {  int totalargs = 1 + (oparg &amp; 0xFF) + (oparg &gt;&gt; 8);  PyObject *seq = POP();    if (unpack_iterable(seq, oparg &amp; 0xFF, oparg &gt;&gt; 8,                      stack_pointer + totalargs)) {    stack_pointer += totalargs;  } else {    Py_DECREF(seq);    goto error;  }  Py_DECREF(seq);  DISPATCH();}              ÂÖ∂ÂÆûÂêåÊ†∑ÊòØ‰ΩøÁî®unpack_iterableËøõË°åËß£ÂåÖÊìç‰Ωú            unpack_iterable    // Ê∫êÁ†ÅÁâàÊú¨‰∏∫3.7.4// ceval.c  /* Iterate v argcnt times and store the results on the stack (via decreasing   sp).  Return 1 for success, 0 if error.     If argcntafter == -1, do a simple unpack. If it is &gt;= 0, do an unpack   with a variable target.*/unpack_iterable(PyObject *v, int argcnt, int argcntafter, PyObject **sp){    int i = 0, j = 0;    Py_ssize_t ll = 0;    PyObject *it;  /* iter(v) */    PyObject *w;    PyObject *l = NULL; /* variable list */      assert(v != NULL);  		    // Ëé∑ÂèñpythonÁöÑËø≠‰ª£Âô®  	// Áõ∏ÂΩì‰∫éiter(o)    // __iter__    it = PyObject_GetIter(v);    // Â¶ÇÊûúÊó†Ê≥ïËø≠‰ª£ÊäõÂá∫ÂºÇÂ∏∏ÔºàPyExc_TypeErrorÔºâ    if (it == NULL) {        if (PyErr_ExceptionMatches(PyExc_TypeError) &amp;&amp;            v-&gt;ob_type-&gt;tp_iter == NULL &amp;&amp; !PySequence_Check(v))        {            PyErr_Format(PyExc_TypeError,                         "cannot unpack non-iterable %.200s object",                         v-&gt;ob_type-&gt;tp_name);        }        return 0;    }  		  	// argcnt‰∏∫Ëø≠‰ª£Ê¨°Êï∞    for (; i &lt; argcnt; i++) {       // __next__       // Ê≤°ÊúâÊ≠§ÊñπÊ≥ï‰πü‰ºöÊäõÂá∫ÂºÇÂ∏∏        w = PyIter_Next(it);        if (w == NULL) {            /* Iterator done, via error or exhaustion. */            if (!PyErr_Occurred()) {                if (argcntafter == -1) {                    PyErr_Format(PyExc_ValueError,                        "not enough values to unpack (expected %d, got %d)",                        argcnt, i);                }                else {                    PyErr_Format(PyExc_ValueError,                        "not enough values to unpack "                        "(expected at least %d, got %d)",                        argcnt + argcntafter, i);                }            }            goto Error;        }        *--sp = w;    }  		  	// argcntafter ‰∏∫-1 ÊâßË°åÁÆÄÂçïÁöÑËß£ÂåÖ    if (argcntafter == -1) {        /* We better have exhausted the iterator now. */        w = PyIter_Next(it);        if (w == NULL) {            if (PyErr_Occurred())                goto Error;            Py_DECREF(it);            return 1;        }        Py_DECREF(w);        // ÁúãÂà∞ËøôÁÜüÊÇâÁöÑÂºÇÂ∏∏‰∫Ü‰πàÔºåÂøòËÆ∞ÁöÑËØùÁúãÁúã‰∏äÈù¢ÁöÑ‰ª£Á†ÅüëÜ        PyErr_Format(PyExc_ValueError,            "too many values to unpack (expected %d)",            argcnt);        goto Error;    }  		    // Á≠âÊïàpython list()  	// a, *b, c = [1, 2, 3, 4]    // ËøòËÆ∞ÂæóÂù§Âù§ÁöÑ‰æãÂ≠ê‰πà    l = PySequence_List(it);    if (l == NULL)        goto Error;    *--sp = l;    i++;      ll = PyList_GET_SIZE(l);    if (ll &lt; argcntafter) {        PyErr_Format(PyExc_ValueError,            "not enough values to unpack (expected at least %d, got %zd)",            argcnt + argcntafter, argcnt + ll);        goto Error;    }      /* Pop the "after-variable" args off the list. */    for (j = argcntafter; j &gt; 0; j--, i++) {        *--sp = PyList_GET_ITEM(l, ll - j);    }    /* Resize the list. */    Py_SIZE(l) = ll - argcntafter;    Py_DECREF(it);    return 1;  Error:    for (; i &gt; 0; i--, sp++)        Py_DECREF(*sp);    Py_XDECREF(it);    return 0;}            ÊÄªÁªì          python ‰∏≠ÂØπlist Âíå tunpÂØπË±°ÊúâÂéüÁîüÊîØÊåÅ      ÂèØËø≠‰ª£ÂØπË±°ÂùáÂèØ‰ª•ÈÄöËøáunpack_iterableÂáΩÊï∞ËøõË°åËß£Êûê„ÄÇ      Ëß£ÂåÖÊìç‰ΩúÊòØcËØ≠Ë®ÄÂÆûÁé∞ÊïàÁéáÂæàÈ´ò„ÄÇ      ÂÜçÊù•‰∏ÄÊÆµÔºåÂÖ≥‰∫éa,b=b,aÁöÑËæüË∞£  ÂæàÂ§öÂçöÂÆ¢‰∏äÂÜôËøôÁßç‰∫§Êç¢Êìç‰Ωú‰πüÊòØËß£ÂåÖ      ËÆ©Êàë‰ª¨Â∞ùËØï‰∏Ä‰∏ãËé∑ÂèñÂÆÉÁöÑÂ≠óËäÇÁ†Å    a, b = b, a  0 LOAD_FAST                1 (b)2 LOAD_FAST                0 (a)4 ROT_TWO6 STORE_FAST               0 (a)8 STORE_FAST               1 (b)        ÂÖ∂ÂÆû‰ªÖ‰ªÖÊòØÊâßË°å‰∫ÜROT_TWOÊìç‰ΩúÂç≥‰∏∫Â∞ÜÊ†àÈ°∂‰∏§‰∏™ÂÄº‰∫§Êç¢    TARGET(ROT_TWO) {PyObject *top = TOP();PyObject *second = SECOND();SET_TOP(second);SET_SECOND(top);FAST_DISPATCH();}        ËøôÈáåÂ∞±‰∏çÂÅöÂ±ïÂºÄ, ÊúâÂÖ¥Ë∂£ÁöÑÂ∞è‰ºô‰º¥ÂèØ‰ª•Ëá™Ë°åÊü•ÈòÖÊ∫êÁ†ÅÂì¶    ‚Äú‰∏ñÁïåÂ∞±ÂÉèÊòØ‰∏™Â∑®Â§ßÁöÑÈ©¨ÊàèÂõ¢ÔºåÂÆÉËÆ©‰Ω†ÂÖ¥Â•ãÔºåÂç¥ËÆ©ÊàëÊÉ∂ÊÅêÔºåÂõ†‰∏∫ÊàëÁü•ÈÅìÊï£Âú∫ÂêéÊ∞∏ËøúÊòØÊúâÈôêÊ∏©Â≠òÔºåÊó†ÈôêÂøÉÈÖ∏„ÄÇ‚Äù‚Äî‚ÄîCharlie Chaplin]]></content>
      <categories>
        
          <category> pythonÂ∞èÊäÄÂ∑ß </category>
        
      </categories>
      <tags>
        
          <tag> python </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Leecode-009]]></title>
      <url>/leecode/2020/03/10/leecode=009/</url>
      <content type="text"><![CDATA[È¢òÁõÆÂà§Êñ≠‰∏Ä‰∏™Êï¥Êï∞ÊòØÂê¶ÊòØÂõûÊñáÊï∞„ÄÇÂõûÊñáÊï∞ÊòØÊåáÊ≠£Â∫èÔºà‰ªéÂ∑¶ÂêëÂè≥ÔºâÂíåÂÄíÂ∫èÔºà‰ªéÂè≥ÂêëÂ∑¶ÔºâËØªÈÉΩÊòØ‰∏ÄÊ†∑ÁöÑÊï¥Êï∞„ÄÇÁ§∫‰æãËæìÂÖ•: 121ËæìÂá∫: trueËæìÂÖ•: -121ËæìÂá∫: falseËß£Èáä: ‰ªéÂ∑¶ÂêëÂè≥ËØª, ‰∏∫ -121 „ÄÇ ‰ªéÂè≥ÂêëÂ∑¶ËØª, ‰∏∫ 121- „ÄÇÂõ†Ê≠§ÂÆÉ‰∏çÊòØ‰∏Ä‰∏™ÂõûÊñáÊï∞„ÄÇËæìÂÖ•: 10ËæìÂá∫: falseËß£Èáä: ‰ªéÂè≥ÂêëÂ∑¶ËØª, ‰∏∫ 01 „ÄÇÂõ†Ê≠§ÂÆÉ‰∏çÊòØ‰∏Ä‰∏™ÂõûÊñáÊï∞„ÄÇÂÖ∂‰ªñÈôêÂà∂Êù°‰ª∂ËøõÈò∂:‰Ω†ËÉΩ‰∏çÂ∞ÜÊï¥Êï∞ËΩ¨‰∏∫Â≠óÁ¨¶‰∏≤Êù•Ëß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢òÂêóÔºüËß£È¢òÂÖàÁî®Â≠óÁ¨¶‰∏≤Â§ÑÁêÜ‰∏Ä‰∏ãclass Solution:    def isPalindrome(self, x: int) -&gt; bool:    a = str(x)[::-1]        if str(a) == str(x):            return True        else:            return FalseËøõÈò∂Ë¶ÅÊ±Ç‰∏çÈÄÇÁî®Â≠óÁ¨¶‰∏≤ ËÄÉËôë‰ΩøÁî®Êï∞Â≠óËß£ÂÜ≥ÈóÆÈ¢òdef isPalindrome(self, x: int) -&gt; bool:    if x &lt; 0 or (x % 10 == 0 and x != 0):        return False    revertedNumber = 0    while x &gt; revertedNumber:        revertedNumber = revertedNumber * 10 + x % 10        x //= 10    if revertedNumber == x or revertedNumber // 10 == x:        return True    else:        return FalseÊ≥®ÊÑèpython3‰ΩøÁî®//‰∏∫Êï¥Èô§]]></content>
      <categories>
        
          <category> Leecode </category>
        
      </categories>
      <tags>
        
          <tag> Leecode easy </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Leecode-013]]></title>
      <url>/leecode/2020/03/10/leecode-013/</url>
      <content type="text"><![CDATA[È¢òÁõÆÁΩóÈ©¨Êï∞Â≠óÂåÖÂê´‰ª•‰∏ã‰∏ÉÁßçÂ≠óÁ¨¶: IÔºå VÔºå XÔºå LÔºåCÔºåD Âíå M„ÄÇÂ≠óÁ¨¶          Êï∞ÂÄºI             1V             5X             10L             50C             100D             500M             1000‰æãÂ¶ÇÔºå ÁΩóÈ©¨Êï∞Â≠ó 2 ÂÜôÂÅö¬†II¬†ÔºåÂç≥‰∏∫‰∏§‰∏™Âπ∂ÂàóÁöÑ 1„ÄÇ12 ÂÜôÂÅö¬†XII¬†ÔºåÂç≥‰∏∫¬†X¬†+¬†II¬†„ÄÇ 27 ÂÜôÂÅö¬†¬†XXVII, Âç≥‰∏∫¬†XX¬†+¬†V¬†+¬†II¬†„ÄÇÈÄöÂ∏∏ÊÉÖÂÜµ‰∏ãÔºåÁΩóÈ©¨Êï∞Â≠ó‰∏≠Â∞èÁöÑÊï∞Â≠óÂú®Â§ßÁöÑÊï∞Â≠óÁöÑÂè≥Ëæπ„ÄÇ‰ΩÜ‰πüÂ≠òÂú®Áâπ‰æãÔºå‰æãÂ¶Ç 4 ‰∏çÂÜôÂÅö¬†IIIIÔºåËÄåÊòØ¬†IV„ÄÇÊï∞Â≠ó 1 Âú®Êï∞Â≠ó 5 ÁöÑÂ∑¶ËæπÔºåÊâÄË°®Á§∫ÁöÑÊï∞Á≠â‰∫éÂ§ßÊï∞ 5 ÂáèÂ∞èÊï∞ 1 ÂæóÂà∞ÁöÑÊï∞ÂÄº 4 „ÄÇÂêåÊ†∑Âú∞ÔºåÊï∞Â≠ó 9 Ë°®Á§∫‰∏∫¬†IX„ÄÇËøô‰∏™ÁâπÊÆäÁöÑËßÑÂàôÂè™ÈÄÇÁî®‰∫é‰ª•‰∏ãÂÖ≠ÁßçÊÉÖÂÜµÔºöI¬†ÂèØ‰ª•ÊîæÂú®¬†V¬†(5) Âíå¬†X¬†(10) ÁöÑÂ∑¶ËæπÔºåÊù•Ë°®Á§∫ 4 Âíå 9„ÄÇX¬†ÂèØ‰ª•ÊîæÂú®¬†L¬†(50) Âíå¬†C¬†(100) ÁöÑÂ∑¶ËæπÔºåÊù•Ë°®Á§∫ 40 Âíå¬†90„ÄÇ¬†C¬†ÂèØ‰ª•ÊîæÂú®¬†D¬†(500) Âíå¬†M¬†(1000) ÁöÑÂ∑¶ËæπÔºåÊù•Ë°®Á§∫¬†400 Âíå¬†900„ÄÇÁªôÂÆö‰∏Ä‰∏™ÁΩóÈ©¨Êï∞Â≠óÔºåÂ∞ÜÂÖ∂ËΩ¨Êç¢ÊàêÊï¥Êï∞„ÄÇËæìÂÖ•Á°Æ‰øùÂú® 1¬†Âà∞ 3999 ÁöÑËåÉÂõ¥ÂÜÖ„ÄÇÁ§∫‰æãËæìÂÖ•: "III"ËæìÂá∫: 3ËæìÂÖ•: "IV"ËæìÂá∫: 4ËæìÂÖ•: "IX"ËæìÂá∫: 9ËæìÂÖ•: "LVIII"ËæìÂá∫: 58Ëß£Èáä: L = 50, V= 5, III = 3.ËæìÂÖ•: "MCMXCIV"ËæìÂá∫: 1994Ëß£Èáä: M = 1000, CM = 900, XC = 90, IV = 4.ÂÖ∂‰ªñÈôêÂà∂Êù°‰ª∂Êó†Ëß£È¢ò‰∏§‰Ωç‰ºòÂÖà‰∏Ä‰Ωç Áõ¥Êé•Âàó‰∏™Â≠óÂÖ∏Ê≠§ÁÆóÊ≥ïÂèñËá™È¢òËß£ ÊÄùË∑ØÂæàÂ∑ßÂ¶ô Ê≥®ÊÑèÈïøÂ∫¶‰∏∫2ÁöÑÂ≠ê‰∏≤ËÆ∞ÂΩïÁöÑÂÄºÊòØÔºàÂÆûÈôÖÂÄº - Â≠ê‰∏≤ÂÜÖÂ∑¶ËæπÁΩóÈ©¨Êï∞Â≠ó‰ª£Ë°®ÁöÑÊï∞ÂÄºÔºâclass Solution:    def isPalindrome(self, x: int) -&gt; bool:    d = {'I':1, 'IV':3, 'V':5, 'IX':8, 'X':10, 'XL':30, 'L':50, 'XC':80, 'C':100, 'CD':300, 'D':500, 'CM':800, 'M':1000}    sum = 0    for i, n in enumerate(s):        sum += d.get(s[max(i - 1, 0):i + 1], d[n])    return sum]]></content>
      <categories>
        
          <category> Leecode </category>
        
      </categories>
      <tags>
        
          <tag> Leecode easy </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[PortiaÂàùÊé¢]]></title>
      <url>/%E7%88%AC%E8%99%AB/2018/08/23/portia%E5%88%9D%E6%8E%A2/</url>
      <content type="text"><![CDATA[ÂÆòÊñπÊñáÊ°£ËøôÊòØportiaÁöÑÂÆòÊñπÊñáÊ°£Âú∞ÂùÄhttps://portia.readthedocs.io/en/latest/Á¨¨‰∏ÄÊ≠•ÂÆâË£ÖdockerÔºàÊé®ËçêÂÆâË£ÖÊñπÂºèÔºâUbuntuÔºösudo apt-get install docker.iopip install docker-composeÔºàÈÄüÂ∫¶ËøáÊÖ¢ÂèØ‰ª•‰ΩøÁî®ÈòøÈáåÁöÑÂä†ÈÄüÂô®ÔºâMACÔºödockerÂÆòÁΩë‰∏ãËΩΩÂØπÂ∫îdmgÂåÖÂÆâË£ÖÂç≥ÂèØ‰∏ãËΩΩÂêØÂä®portiaÈïúÂÉèÂπ∂ÂêØÂä®docker run -i -t --rm -v /Users/&lt;username&gt;/Projects/portia_projects:/app/data/projects:rw -p 9001:9001 scrapinghub/portiaÊ≠§Êó∂ËÆøÈóÆ127.0.0.1:9001Âç≥ÂèØÊâìÂºÄportiaÂêéÁª≠ÁõÆÂâç‰ΩøÁî®‰πüÊòØ‰ªÖ‰ªÖÂ∞ÜÁéØÂ¢ÉÈÉ®ÁΩ≤Âπ∂ÂÅöÁÆÄÂçïÂ∞ùËØïÔºåÂêéÁª≠È´òÁ∫ßÂäüËÉΩ‰ºöÂÜçÂÅö‰ªãÁªç„ÄÇ]]></content>
      <categories>
        
          <category> Áà¨Ëô´ </category>
        
      </categories>
      <tags>
        
          <tag> Êï∞ÊçÆÊî∂ÈõÜ </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Leecode-007]]></title>
      <url>/leecode/2018/08/22/leecode-007/</url>
      <content type="text"><![CDATA[È¢òÁõÆÁªôÂÆö‰∏Ä‰∏™ 32 ‰ΩçÊúâÁ¨¶Âè∑Êï¥Êï∞ÔºåÂ∞ÜÊï¥Êï∞‰∏≠ÁöÑÊï∞Â≠óËøõË°åÂèçËΩ¨„ÄÇÁ§∫‰æãËæìÂÖ•: 123ËæìÂá∫: 321ËæìÂÖ•: -123ËæìÂá∫: -321ËæìÂÖ•: 120ËæìÂá∫: 21ÂÖ∂‰ªñÈôêÂà∂Êù°‰ª∂ÂÅáËÆæÊàë‰ª¨ÁöÑÁéØÂ¢ÉÂè™ËÉΩÂ≠òÂÇ® 32 ‰ΩçÊúâÁ¨¶Âè∑Êï¥Êï∞ÔºåÂÖ∂Êï∞ÂÄºËåÉÂõ¥ÊòØ [‚àí231,  231 ‚àí 1]„ÄÇÊ†πÊçÆËøô‰∏™ÂÅáËÆæÔºåÂ¶ÇÊûúÂèçËΩ¨ÂêéÁöÑÊï¥Êï∞Ê∫¢Âá∫ÔºåÂàôËøîÂõû 0„ÄÇÈ¢òËß£‰ª£Á†Å class Solution:    def reverse(self, x):        """        :type x: int        :rtype: int        """        a = int(str(abs(x))[::-1])        #ÂÖàÂèñxÁöÑÁªùÂØπÂÄºÂ∞ÜÂÖ∂ÂÄíÁΩÆÁÑ∂ÂêéËΩ¨Êç¢‰∏∫Êï¥Êï∞        if -2147483648 &lt; a &lt; 2147483647:  #Êï¥Êï∞‰∏çÊ∫¢Âá∫ÁöÑÊù°‰ª∂            if x &lt; 0:            #Â¶ÇÊûúÂéüÊï∞Â≠óÊòØË¥üÊï∞‰∏∫ÂÖ∂Ê∑ªÂä†Ë¥üÂè∑                a = -a            return a        else:            return 0 Ëß£È¢òÊÄùË∑ØËøô‰∏™È¢òÊìç‰ΩúÊòØÂ∞ÜÊï∞Â≠óÂèçËΩ¨ÔºåÊàë‰ª¨ÂæàËá™ÁÑ∂ÊÉ≥Âà∞ÂèØ‰ª•‰ΩøÁî®[::-1]ÁöÑÊñπÊ≥ïËé∑ÂæóÂèçËΩ¨ÁöÑÂ≠óÁ¨¶‰∏≤ÔºåÁÑ∂ÂêéËΩ¨Âåñ‰∏∫intÁ±ªÂûãÂèØ‰ª•ÂéªÊéâÂâçÂØºÈõ∂ÔºåÂ¶ÇÊûú‰ΩøÁî®Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂèØ‰ª•‰ΩøÁî®rstrip('0')ÂéªÊéâÂ∑¶ËæπÁöÑ‚Äò0‚ÄôÂ≠óÁ¨¶]]></content>
      <categories>
        
          <category> Leecode </category>
        
      </categories>
      <tags>
        
          <tag> Leecode easy </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Leecode-002]]></title>
      <url>/leecode/2018/08/22/leecode-002/</url>
      <content type="text"><![CDATA[È¢òÁõÆÁªôÂÆö‰∏Ä‰∏™ÊéíÂ∫èÊï∞ÁªÑÔºå‰Ω†ÈúÄË¶ÅÂú®ÂéüÂú∞Âà†Èô§ÈáçÂ§çÂá∫Áé∞ÁöÑÂÖÉÁ¥†Ôºå‰ΩøÂæóÊØè‰∏™ÂÖÉÁ¥†Âè™Âá∫Áé∞‰∏ÄÊ¨°ÔºåËøîÂõûÁßªÈô§ÂêéÊï∞ÁªÑÁöÑÊñ∞ÈïøÂ∫¶„ÄÇ‰∏çË¶Å‰ΩøÁî®È¢ùÂ§ñÁöÑÊï∞ÁªÑÁ©∫Èó¥Ôºå‰Ω†ÂøÖÈ°ªÂú®ÂéüÂú∞‰øÆÊîπËæìÂÖ•Êï∞ÁªÑÂπ∂Âú®‰ΩøÁî® O(1) È¢ùÂ§ñÁ©∫Èó¥ÁöÑÊù°‰ª∂‰∏ãÂÆåÊàê„ÄÇÁ§∫‰æãÁªôÂÆöÊï∞ÁªÑ nums = [1,1,2], ÂáΩÊï∞Â∫îËØ•ËøîÂõûÊñ∞ÁöÑÈïøÂ∫¶ 2, Âπ∂‰∏îÂéüÊï∞ÁªÑ nums ÁöÑÂâç‰∏§‰∏™ÂÖÉÁ¥†Ë¢´‰øÆÊîπ‰∏∫ 1, 2„ÄÇ ‰Ω†‰∏çÈúÄË¶ÅËÄÉËôëÊï∞ÁªÑ‰∏≠Ë∂ÖÂá∫Êñ∞ÈïøÂ∫¶ÂêéÈù¢ÁöÑÂÖÉÁ¥†„ÄÇÁªôÂÆö nums = [0,0,1,1,1,2,2,3,3,4],ÂáΩÊï∞Â∫îËØ•ËøîÂõûÊñ∞ÁöÑÈïøÂ∫¶ 5, Âπ∂‰∏îÂéüÊï∞ÁªÑ nums ÁöÑÂâç‰∫î‰∏™ÂÖÉÁ¥†Ë¢´‰øÆÊîπ‰∏∫ 0, 1, 2, 3, 4„ÄÇ‰Ω†‰∏çÈúÄË¶ÅËÄÉËôëÊï∞ÁªÑ‰∏≠Ë∂ÖÂá∫Êñ∞ÈïøÂ∫¶ÂêéÈù¢ÁöÑÂÖÉÁ¥†„ÄÇÈ¢òËß£‰ª£Á†Å class Solution:    def removeDuplicates(self, nums):        """        :type nums: List[int]        :rtype: int        """        i = 0        while i &lt; len(nums)-1:            if nums[i] == nums[i+1]:                nums.remove(nums[i])                ÈÅáÂà∞ÈáçÂ§çÂ∞±ÊääÈáçÂ§çÁöÑÂÖÉÁ¥†Âà†Èô§Êéâ            else:                i += 1        return len(nums)Ëß£È¢òÊÄùË∑ØËøô‰∏™ÂáΩÊï∞Âú®‰ΩøÁî®ÁöÑÊó∂ÂÄô‰º†ÈÄíÁöÑÊòØÂºïÁî®ÂÄºÔºåÂç≥‰∏∫ÂáΩÊï∞Êìç‰Ωú‰πãÂêé‰º†ÂÖ•ÂèòÈáèÁöÑÂÄº‰πü‰ºöÂèëÁîüÊîπÂèòÔºåÂç≥Âú®ÂéüÊúâÂàóË°®‰∏äÊìç‰ΩúÔºàÂéüÂú∞ÂéªÈáçÔºâ„ÄÇ]]></content>
      <categories>
        
          <category> Leecode </category>
        
      </categories>
      <tags>
        
          <tag> Leecode easy </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Leecode-001]]></title>
      <url>/leecode/2018/08/22/leecode-001/</url>
      <content type="text"><![CDATA[È¢òÁõÆÁªôÂÆö‰∏Ä‰∏™Êï¥Êï∞Êï∞ÁªÑÂíå‰∏Ä‰∏™ÁõÆÊ†áÂÄºÔºåÊâæÂá∫Êï∞ÁªÑ‰∏≠Âíå‰∏∫ÁõÆÊ†áÂÄºÁöÑ‰∏§‰∏™Êï∞„ÄÇ‰Ω†ÂèØ‰ª•ÂÅáËÆæÊØè‰∏™ËæìÂÖ•Âè™ÂØπÂ∫î‰∏ÄÁßçÁ≠îÊ°àÔºå‰∏îÂêåÊ†∑ÁöÑÂÖÉÁ¥†‰∏çËÉΩË¢´ÈáçÂ§çÂà©Áî®„ÄÇÁ§∫‰æãÁªôÂÆö nums = [2, 7, 11, 15], target = 9Âõ†‰∏∫ nums[0] + nums[1] = 2 + 7 = 9ÊâÄ‰ª•ËøîÂõû [0, 1]È¢òËß£‰ª£Á†Å def twoSum(self, nums, target):        """        :type nums: List[int]        :type target: int        :rtype: List[int]        """        for k, i in enumerate(nums):            if target - i in nums[k + 1:]:                return [k, nums[k + 1:].index(target - i) + k + 1]Ëß£È¢òÊÄùË∑ØÁ¨¨‰∏ÄÊ¨°È¢òËß£‰ΩøÁî®Êö¥Âäõ‰∫åÈáçÂæ™ÁéØËß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢ò„ÄÇÁÑ∂ÂêéÂèëÁé∞ÂèØ‰ª•ÁÆÄÂçï‰ΩøÁî®‰∏ÄÂ±ÇÂæ™ÁéØÂÆûÁé∞ÈÅáÂà∞Âíå‰∏∫targetÁõ¥Êé•ËøîÂõû]]></content>
      <categories>
        
          <category> Leecode </category>
        
      </categories>
      <tags>
        
          <tag> Leecode easy </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
